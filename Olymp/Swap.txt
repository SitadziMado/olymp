#include <algorithm>
#include <chrono>
#include <deque>
#include <fstream>
#include <functional>
#include <iterator>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <limits>
#include <list>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <utility>
#include <vector>
#include <queue>

#include <clocale>
#include <cmath>

#ifdef HOME
#include "Tester.h"
#endif // HOME

using i64 = long long;
using u64 = unsigned long long;

std::vector<i64> pows = {
	0,
	1,
	3,
	7,
	15,
	31,
	63,
	127,
	255,
	511,
	1023,
	2047,
	4095,
	8191,
	16383,
	32767,
	65535,
	131071,
	262143,
	524287,
	1048575,
	2097151,
	4194303,
	8388607,
	16777215,
	33554431,
	67108863,
	134217727,
	268435455,
	536870911,
	1073741823,
	2147483647,
	4294967295,
	8589934591,
	17179869183,
	34359738367,
	68719476735,
	137438953471,
	274877906943,
	549755813887,
	1099511627775,
	2199023255551,
	4398046511103,
	8796093022207,
	17592186044415,
	35184372088831,
	70368744177663,
	140737488355327,
	281474976710655,
	562949953421311,
	1125899906842623,
	2251799813685247,
	4503599627370495,
	9007199254740991,
	18014398509481983,
	36028797018963967,
	72057594037927935,
	144115188075855871,
	288230376151711743,
	576460752303423487,
};

struct Tuple
{
	i64 value;
	i64 cost;
	i64 count;
};

bool operator<(const Tuple& lhs, const Tuple& rhs)
{
	return (lhs.cost) < (rhs.cost);
}

void _main();

int main(int argc, char **argv)
{
	std::ios_base::sync_with_stdio(false);

#ifdef HOME

	/*std::setlocale(LC_ALL, "ru-RU");

	Tester tester;

	tester
		.assertEq(
			"2\n7\n42",
			"3\n10",
			_main
		)
		.assertEq(
			"1\n10",
			"4",
			_main
		)
		.assertEq(
		"1\n11",
		"4",
		_main
	);*/

#else
	// _main();
#endif // HOME

	_main();

	return 0;
}

void _main()
{
	using std::cin;
	using std::cout;

#ifdef HOME
	std::ifstream in("input.txt");
	//std::ofstream out("output.txt");
#define cin in
//#define cout out
#endif

	size_t t;

	cin >> t;

	for (size_t i = 0; i < t; ++i)
	{
		std::set<Tuple> vals;

		vals.insert({ 1, 2, 1 });

		i64 n;
		cin >> n;
		--n;
		i64 temp = 1;
		size_t iters = 1;

		i64 col = 1;

		while (temp < n)
		{
			auto fst = vals.cbegin();
			auto fstVal = *fst;
			i64 cost = 0;

			if ((fstVal.cost) <= temp + 1)
			{
				cost = fstVal.cost;

				if (fstVal.count + 1 >= pows.size())
					cout << "of";

				fstVal.cost = (pows[fstVal.count + 1] + 1) * fstVal.value;
				++fstVal.count;
				vals.erase(fst);
				vals.insert(fstVal);
			}
			else
			{
				cost = temp + 1;
				vals.insert({ temp + 1, (temp + 1) * 2, 1 });
				++temp;
			}

			n -= cost;

			++iters;
		}

		cout << iters << std::endl;
	}


#ifdef HOME
	// system("pause");
#endif
}