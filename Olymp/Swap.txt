#include <algorithm>
#include <array>
#include <chrono>
#include <deque>
#include <fstream>
#include <functional>
#include <iterator>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <limits>
#include <list>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <utility>
#include <vector>
#include <queue>

#include <thread>

#include <clocale>
#include <cmath>

#ifdef HOME
#include "Tester.h"
#endif // HOME

using i64 = long long;
using u64 = unsigned long long;

void _main();

int main(int argc, char **argv)
{
	std::ios_base::sync_with_stdio(false);

#ifdef HOME

	std::setlocale(LC_ALL, "ru-RU");

	Tester tester(_main);

	tester
		.eq(
R"(5 3
1 2 3 4 5)",
R"(5
1 2 3 4 5)"
		)
		.eq(
R"(5 42
1 2 3 4 5)",
R"(1
5)"
		)
		.eq(
R"(5 3
1 2 4 5 3)",
R"(5
1 2 3 4 5)"
		)
		.eq(
R"(7 3
1 2 3 4 5 5 4)",
R"(6
1 2 3 4 5 7)"
		)
		.eq(
			R"(1 100 5)",
			R"(1
1)"
		)
		.eq(
			R"(1 1 5)",
			R"(1
1)"
		)
		.eq(
			R"(5 6
5 5 5 5 5)",
R"(5
1 2 3 4 5)"
)
.eq(
	R"(6 6
5 5 5 5 5 5)",
R"(6
1 2 3 4 5 6)"
)
.eq(
	R"(6 5
5 5 5 8 6 7)",
R"(6
1 2 3 4 5 6)"
)
.eq(
	R"(5 5
5 5 5 6 7)",
R"(5
1 2 3 4 5)"
)
.eq(
	R"(5 4
1 2 3 5 7)",
R"(5
1 2 3 4 5)"
)
.eq(
	R"(5 4
3 3 3 5 7)",
R"(5
1 2 3 4 5)"
)
.eq(
	R"(5 4
6 5 5 5 7)",
R"(5
1 2 3 4 5)"
).eq(
	R"(5 4
6 5 5 8 7)",
R"(4
1 2 3 5)"
)
		;

#else
	_main();
#endif // HOME

	//_main();

	return 0;
}

struct Pair
{
	i64 value;
	size_t index;
};

bool operator<(const Pair& lhs, const Pair& rhs)
{
	return lhs.value < rhs.value;
}

std::vector<i64> count(std::vector<Pair>& input, std::vector<Pair>::const_iterator it)
{
	bool ok = true;
	std::vector<i64> answers;

	auto ri = it;
	++ri;

	auto last = it->value;

	while (it->value == last)
	{
		answers.push_back(it->index);

		if (it == input.cbegin())
		{
			ok = false; break;
		}

		--it;
	}

	while (ri != input.cend() && ri->value == last)
	{
		answers.push_back(ri->index);
		++ri;
	}

	size_t curSize = answers.size();

	if (ok)
	while (ri != input.cend())
	{
		answers.push_back(it->index);
		answers.push_back(ri->index);
		++ri;

		if (it == input.cbegin())
			break;

		--it;
	}

	if (it == input.cbegin() && ri == input.cend())
		;
	else if (it == input.cbegin())
	{
		for (size_t i = 0; ri != input.cend() && i < curSize; ++i)
		{
			answers.push_back(ri->index);
			++ri;
		}
	}
	else // if (ri == input.cend())
	{
		for (size_t i = 0; i < curSize - 1; ++i)
		{
			answers.push_back(it->index);

			if (it == input.cbegin())
				break;

			--it;
		}
	}

	return answers;
}

void _main()
{
	using std::cin;
	using std::cout;

#ifdef HOME
	std::ifstream in("input.txt");
	std::ofstream out("output.txt");
#define cin in
#define cout out
#endif

	i64 k;
	size_t n;

	cin >> n >> k;

	std::vector<Pair> input;
	std::vector<i64> answers;

	for (size_t i = 0; i < n; i++)
	{
		i64 t;
		cin >> t;
		input.push_back({ t, i + 1 });
	}

	std::sort(
		input.begin(),
		input.end()
	);

	Pair toFind{ k, 0 };

	auto it = std::lower_bound(
		input.cbegin(),
		input.cend(),
		toFind
	);

	if (it == input.cend())
	{
		bool ok = true;
		--it;
		auto last = it->value;

		while (it->value == last)
		{
			answers.push_back(it->index);
			
			if (it == input.cbegin())
			{
				ok = false; break;
			}

			--it;
		}

		auto cnt = answers.size() - 1;
		if(ok)
		for (size_t i = 0; i < cnt; ++i)
		{
			answers.push_back(it->index);

			if (it == input.cbegin())
				break;

			--it;
		}
	}
	else if (it->value == k)
	{
		answers = count(input, it);
	}
	else
	{
		auto val = it->value - k;
		auto le = it;

		while (le != input.cbegin() && le->value == it->value)
		{
			--le;
		}

		if (le->value == it->value)
			answers = count(input, it);
		else if (k - le->value < val)
			answers = count(input, le);
		else if (k - le->value == val)
		{
			auto another = count(input, it);
			answers = count(input, le);

			if (another.size() > answers.size())
				another.swap(answers);
		}
		else
			answers = count(input, it);
	}

	std::sort(
		answers.begin(),
		answers.end()
	);

	cout << answers.size() << std::endl;

	for (auto& a : answers)
		cout << a << " ";

#ifdef HOME
	// system("pause");
#endif
}