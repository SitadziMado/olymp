#include <functional>
#include <iostream>
#include <sstream>
#include <tuple>
#include <type_traits>

const std::string DefaultSep = " ";

struct NullType {};
template<typename T, typename... Ts> struct InputImpl;

template<typename T>
struct InputImpl<T, NullType>
{
	std::tuple<T> operator()(std::stringstream& ss)
	{
		T c;
		ss >> c;
		return{ c };
	}
};

template<typename T, typename... Ts>
struct InputImpl
{
	decltype(auto) operator()(std::stringstream& ss)
	{
		T c;
		ss >> c;

		return std::tuple_cat(
			std::make_tuple(c),
			InputImpl<Ts...>()(ss)
		);
	}
};

template<typename T, typename... Ts>
std::tuple<T, Ts...> input()
{
	std::string s;
	std::getline(std::cin, s);
	auto ss = std::stringstream(s);
	return InputImpl<T, Ts..., NullType>()(ss);
}

template<typename T, typename... Ts> struct Printer;

template<typename T>
struct Printer<T>
{
	void operator()(T&& t)
	{
		print(DefaultSep, std::forward<T>(t));
	}

	void print(const std::string& sep, T&& t)
	{
		std::cout << t << std::endl;
	}
};

template<typename T, typename... Ts> 
struct Printer
{
	void operator()(T&& t, Ts&&... ts)
	{
		print(DefaultSep, t, ts...);
	}

	void print(const std::string& sep, T&& t, Ts&&... ts)
	{
		std::cout << t << sep;
		Printer<Ts...>()(std::forward<Ts>(ts)...);
	}
};

template<typename... Ts>
void print(Ts&&... vals)
{
	Printer<Ts...>()(std::forward<Ts>(vals)...);
}

template<typename... Ts>
void print(std::string& sep, Ts&&... vals)
{
	Printer<Ts...>().print(sep, std::forward<Ts>(vals)...);
}

int main()
{
    return 0;
}


#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <iostream>
#include <list>
#include <cmath>
#include <set>
#include <string>
#include <vector>

typedef long long i64;
typedef unsigned long long u64;
using namespace std;

typedef vector<set<i64, greater<i64> > > SetVector;

vector<i64> transformSeq(const vector<i64>& s, size_t n, size_t limit)
{
	SetVector sets = SetVector(s.size(), set<i64, greater<i64> >());
	size_t counter = 0U;

	for (size_t i = 0; i < s.size(); i++)
		sets[i].insert(s[i]);

	bool ok = false;


	if (counter == n - s.size())
	{
		ok = true;
		goto plain;
	}

	for (size_t i = 0; i < s.size(); ++i)
	{
		if (counter == n - s.size())
		{
			ok = true;
			goto plain;
		}


		for (size_t j = limit; j > s[i]; --j)
		{
			if (counter == n - s.size())
			{
				ok = true;
				goto plain;
			}

			sets[i].insert(j);

			++counter;

			if (counter == n - s.size())
			{
				ok = true;
				goto plain;
			}
		}

		for (i64 j = s[i] - 1; j >= 1; --j)
		{
			if (counter == n - s.size())
			{
				ok = true;
				goto plain;
			}

			sets[i].insert(j);

			++counter;

			if (counter == n - s.size())
			{
				ok = true;
				goto plain;
			}
		}


	}

plain: vector<i64> result;

	for (size_t i = 0; i < s.size(); ++i)
	{
		copy(
			sets[i].begin(),
			sets[i].end(),
			back_inserter(result)
		);
	}

	if (ok)
		return result;
	else
		return vector<i64>(1, -1);
}

int main()
{
	using std::cin;
	using std::cout;
	
	size_t k, n, m;

	cin >> k >> n >> m;

	vector<i64> sketch;

	for (size_t i = 0; i < k; i++)
	{
		i64 a;
		cin >> a;

		if (a == -1)
			a = (i == 0) ? 1 : sketch[i - 1];

		sketch.push_back(a);
	}

	if (n >= k&&n<=k*m-sketch.back()+1)
	{
		vector<i64> seq = transformSeq(sketch, n, m);

		for (size_t i = 0; i < seq.size(); ++i)
			cout << seq[i] << " ";
	}
	else
	{
		cout << "-1";
	}

    return 0;
}


#include <algorithm>
#include <functional>
#include <iostream>
#include <cmath>
#include <string>
#include <vector>

typedef long long i64;
typedef unsigned long long u64;
using namespace std;

i64 n;
i64 s;

bool canIncrease(vector<i64> vec)
{
	for (vector<i64>::iterator it = vec.begin(); it != vec.end(); ++it)
		if (*it < s)
			return true;

	return false;
}


void increase(vector<i64>& vec)
{
	for(i64 i = vec.size()-1; true; --i)
		if (vec[i] < s)
		{
			vec[i]++; return;
		}
		else
		{
			vec[i] = 0;
		}
}
vector<i64> abilities;
vector<i64> ultimates;
vector<i64> strengths;
vector<i64> turn;
i64 calculateStrength(vector<i64> firstPriorities, vector<i64> secondPriorities)
{
	i64 firstStrength = 0;
	i64 secondStrength = 0;
	i64 abilitiesIndex = 0;
	i64 ultimatesIndex = 0;
	i64 x;
	vector<i64>firstCounter = vector<i64>(n, 0);
	vector<i64> secondCounter = vector<i64>(n, 0);
		for(i64 i = 0; i < turn.size(); ++i)
			if (turn[i] - 1< n)
			{
				 x = turn[i]-1;
				 if (firstPriorities[x] == firstCounter[x])
				 {
					 firstStrength += ultimates[ultimatesIndex];
					 ultimatesIndex++;
				}
				 else
				 {
					 firstStrength += abilities[abilitiesIndex];
					 abilitiesIndex++;
					 
				 }
				 firstCounter[x]++;
			}
			else
			{
				 x = turn[i]-1 - n;
				 if (secondPriorities[x] == secondCounter[x])
				 {
					 secondStrength += ultimates[ultimatesIndex];
					 ultimatesIndex++;
				 }
				 else
				 {
					 secondStrength += abilities[abilitiesIndex];
					 abilitiesIndex++;
				 }
				 secondCounter[x]++;
			}
		return firstStrength - secondStrength;
}

int main()
{
	using std::cin;
	using std::cout;



	cin >> n >> s;
	turn = vector<i64>((2 * n)*(s+1));

	for (size_t i = 0; i < turn.size(); ++i)
		cin >> turn[i];

	i64 ps;
	cin >> ps;

	for (i64 i = 0; i < ps; ++i)
	{
		i64 x;
		cin >> x;
		abilities.push_back(x);
	}

	i64 pu;
	cin >> pu;
		
	for (i64 i = 0; i < pu; ++i)
	{
		i64 x;
		cin >> x;
		ultimates.push_back(x);
	}

	sort(abilities.begin(), abilities.end(), greater<i64>());
	sort(ultimates.begin(), ultimates.end(), greater<i64>());
	
	i64 max = 0;
	vector<i64> firstPriorities = vector<i64>(n, 0);
	
		vector<i64> secondPriorities = vector<i64>(n, 0);
		i64 min = calculateStrength(firstPriorities, secondPriorities);
		while (canIncrease(secondPriorities))
		{
			increase(secondPriorities);
			i64 x = calculateStrength(firstPriorities, secondPriorities);
			if (x < min)
				min = x;

		}
		max = min;

	while (canIncrease(firstPriorities))
	{
		increase(firstPriorities);
		vector<i64>secondPriorities = vector<i64>(n, 0);
		 min = calculateStrength(firstPriorities, secondPriorities);
		while (canIncrease(secondPriorities))
		{
			increase(secondPriorities);
			i64 x = calculateStrength(firstPriorities, secondPriorities);
			if (x < min)
				min = x;
		}
		if (min > max)
			max = min;
	}
	
	
		cout << max;
	
    return 0;
}








	const size_t Modulo = 998244353;

	size_t t;

	cin >> t;

	for (size_t i = 0; i < t; ++i)
	{
		size_t n, m;

		cin >> n >> m;

		vector<pair<i64, i64> > xgs;
		vector<pair<i64, i64> > ygs;

		xgs.reserve(m), ygs.reserve(m);

		for (size_t j = 0; j < m; ++j)
		{
			pair<i64, i64> p;
			cin >> p.first >> p.second;

			if (p.first > p.second)
				xgs.push_back(p);
			else
				ygs.push_back(p);
		}


	}






#include <algorithm>
#include <deque>
#include <functional>
#include <iterator>
#include <iostream>
#include <memory>
#include <numeric>
#include <limits>
#include <list>
#include <cmath>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <queue>

typedef long long i64;
typedef unsigned long long u64;
using namespace std;

i64 Imax = numeric_limits<i64>::max();
size_t Max = numeric_limits<size_t>::max();

struct Node
{
	Node(size_t lhs, size_t rhs)
	{
		if (lhs != rhs)
		{
			val = rhs - lhs + 1;
			left.reset(new Node(lhs, (lhs + rhs) / 2));
			right.reset(new Node((lhs + rhs) / 2 + 1, rhs));
		}
		else
		{
			val = 1;
			meaning = rhs;
		}
	}

	i64 at(i64 index)
	{
		--val;

		if (left != nullptr || right != nullptr)
			if (index > left->val)
				return right->at(index - left->val);
			else
				return left->at(index);
		else
			return meaning;
	}

	unique_ptr<Node> left;
	unique_ptr<Node> right;
	i64 val;
	i64 meaning;
};

int main()
{
	size_t n;

	cin >> n;

	Node root(1, n);

	vector<i64> nums;

	for (size_t i = 0; i < n; i++)
	{
		i64 t;
		cin >> t;
		nums.push_back(t);
	}

	//root.print();

	stack<i64> answers;

	for (i64 i = n - 1; i >= 0; --i)
	{
		answers.push(root.at(nums[i]));
	}

	while (!answers.empty())
	{
		i64 t = answers.top();
		answers.pop();
		cout << t << " ";
	}

	return 0;
}